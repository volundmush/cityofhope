@skip isdbref(tag(setr(1,social)))={@assert/inline isdbref(globalroom())=@pemit %#=ERROR: No master room set!;@assert/inline isdbref(setr(0,create(Social Commands,,t)))=@pemit %#=ERROR: Could not create code object %q1: %q0;@set %q0=INDESTRUCTIBLE !NO_COMMAND;@tag/add %q1=%q0;@tel %q0=globalroom()}

&META_AUTHOR #social=Sponge/#4
&META_PURPOSE #social=Manage IC Social Relationships
&META_UPDATED_BY #social=Sponge/#4

@skip isdbref(tag(setr(1,socialdb)))={@assert/inline isdbref(tag(stor))=@pemit %#=ERROR: No storage object installed!;@assert/inline isdbref(setr(0,create(Social Database,,t)))=@pemit %#=ERROR: Could not create code object: %q0;@set %q0=INDESTRUCTIBLE NO_COMMAND;@tag/add %q1=%q0;@tel %q1=#stor}

&META_AUTHOR #socialdb=Sponge/#4
&META_PURPOSE #socialdb=Track IC social relationships.
&META_UPDATED_BY #socialdb=Sponge/#4

&CMND_PACK_CHAT #social=$+pack/chat *:@switch [isapproved(%#)][t(setr(N,get(#socialdb/DATA_PACK_CHAN_[u(#dataman/UFUN_ENCODE_STAT,setr(P,u(#dataman/UFUN_GET_BASE_STAT,%#,Pack)))])))][t(setr(W,setdiff(setinter(lwho(),u(#dataman/UFUN_MATCH_SHEETS,Pack@is@%qP,APP)),%#)))][not(get(%#/DATA_PACKCHAT_OFF))]=0*,@pemit %#=[errstr()] [pcol(You must be approved to use +pack)],10*,@pemit %#=[errstr()] [pcol(Your pack ')][argcol(%qP)][pcol(' isn't configured for +pack.)],110*,@pemit %#=[errstr()] [pcol(No one else from)] [argcol(%qP)] [pcol(is online.)],1110*,@pemit %#=[errstr()] [pcol(Your pack chat is off. Use)] [argcol(+pack/on)],1111,{@dolist %qW %#=@trigger me/TRIG_SEND_PACK_CHAT=##,%#,%0}
&CMND_PACK_CHAN #social=$+pack/chan *=*:@switch [hasauthority(%#,SETSTATS)][t(u(#dataman/UFUN_MATCH_SHEETS,Pack@is@%0,APP))]=0*,@pemit %#=[errstr()] [pcol(To set a pack channel you must have the authorit)] [argcol(SETSTATS)],10*,@pemit %#=[errstr()] [pcol(There are no approved characters with the pack)] [argcol(%0)],11,{&DATA_PACK_CHAN_[u(#dataman/UFUN_ENCODE_STAT,%0)] [#socialdb]=%1;@pemit %#=[argcol(%0)] [pcol(now sees pack chat as)] [scol(<)][pcol(%1)][scol(>)]}
&UFUN_POSE #social=[switch(1,strmatch(%0,:*),%b[after(%0,:)],strmatch(%0,;*),[after(%0,;)],1,{%bsays, "%0"})]
&TRIG_SEND_PACK_CHAT #social=@switch [t(get(%0/DATA_PACKCHAT_OFF))]=0,@pemit %0=[scol(<)][pcol(%qN)][scol(>)] [argcol(moniker(%1))][u(UFUN_POSE,%2)]
&CMND_PACK_NOSWITCH #social=$+pack *:@force %#=+pack/chat [escape(%0)]
&CMND_PACK_ON #social=$+pack/on:&DATA_PACKCHAT_OFF %#;@pemit %#=[pcol(Pack Chat enabled)]
&CMND_PACK_OFF #social=$+pack/off:&DATA_PACKCHAT_OFF %#=1;@pemit %#=[pcol(Pack Chat disabled)]
&CMND_PACK_NOARGSWITCH #social=$+pack:@pemit %#=[textfile(+help,+pack)]
&DB_ALTS #social=#6921
&UFUN_SAME_NETS #social=t(setinter(get(%0/_LIST_IPS),get(%1/_LIST_IPS)))
&TRIG_ALT_CLAIM_REQ #social=&DATA_REQ_[edit(%0,#,)]_[edit(%1,#,)] [v(DB_ALTS)]=[add(secs(),mul(60,60,24))];@pemit %1=[argcol(moniker(%0))] [pcol(is claiming that)] [argcol(moniker(%1))] [pcol(is an alt. To confirm and link the two do:)] [tcol(+alts/confirm [moniker(%0)])];@pemit %0=[pcol(Sending alt request to)] [argcol(moniker(%1))]
&UFUN_IP_COLLISION #social=candbool(not(corbool(member(get(%0/_LIST_IPS),192.168.1),member(get(%1/_LIST_IPS),192.168.1))),setinter(get(%0/_LIST_IPS),get(%1/_LIST_IPS)))
&UFUN_AREALTS #social=if(candbool(u(UFUN_ALTS_BLESSED,%0),u(UFUN_ALTS_BLESSED,%1)),strmatch(get(%1/_PLAYER_ID),get(%0/_PLAYER_ID)),u(UFUN_UNREG_ALTCHECK,%0,%1))
&UFUN_UNREG_ALTCHECK #social=corbool(u(UFUN_IP_COLLISION,%0,%1),strmatch(get(%0/SEMAIL),get(%1/SEMAIL)))
&UFUN_NEW_PLAYERID #social=if(hasattr(v(DB_ALTS),DATA_PLAYER_[setr(0,uid())]),u(UFUN_NEW_PLAYERID),%q0)
&CMND_ALTS_ENROLL #social=$+alts/enroll:@switch [not(hasattr(%#,_PLAYER_ID))][setq(0,u(UFUN_NEW_PLAYERID))]=0*,@pemit %#=[errstr()] [pcol(You're already enrolled!)],1,{&_PLAYER_ID %#=%q0;&DATA_PLAYER_%q0 [v(DB_ALTS)]=[u(UFUN_UPDATE_ALTS,%#,%#)];@pemit %#=[pcol(Enrolled!)]}
&TRIG_PLAYER_REC_MERGE #social=&DATA_PLAYER_%0 [v(DB_ALTS)]=u(UFUN_UPDATE_ALTS,first(setr(0,get(v(DB_ALTS)/DATA_PLAYER_%0))),setunion(first(%q0,|),first(setr(1,get(v(DB_ALTS)/DATA_PLAYER_%1)),|)),if(member([extract(%q0,2,1,|)] [extract(%q1,2,1,|)],PUBLIC),PUBLIC,PRIVATE),if(member([extract(%q0,3,1,|)] [extract(%q1,3,1,|)],NOPING),NOPING,PING),if(member([extract(%q0,4,1,|)] [extract(%q1,4,1,|)],BLESSED),BLESSED,NOTBLESSED));&DATA_PLAYER_%1 [v(DB_ALTS)];@trigger me/TRIG_PLAYER_MERGE=%0
&TRIG_PLAYER_MERGE #social=@dolist [first(get(v(DB_ALTS)/DATA_PLAYER_%0),|)]=&_PLAYER_ID ##=%0
&CMND_ALTS_CLAIM #social=$+alts/claim *:@switch [t(setr(0,whois(%0)))][strmatch(get(%#/lastip),get(%q0/lastip))][hasattr(%#,_PLAYER_ID)][hasattr(%q0,_PLAYER_ID)][not(strmatch(get(%#/_PLAYER_ID),get(%q0/_PLAYER_ID)))]=0*,@pemit %#=[errstr()] [pcol(I can't identify)] [argcol(%0)],10*,@pemit %#=[errstr()] [pcol(To claim an alt\, both characters must be logged in from the same IP.)],110*,@pemit %#=[errstr()] [pcol(Before you can claim an alt you must)] [argcol(+alts/enroll)],1110*,@pemit %#=[errstr()] [pcol(Before you can claim)] [argcol(moniker(%q0))] [pcol(as an alt [subj(%q0)] must)] [argcol(+alts/enroll)],11110*,@pemit %#=[errstr()] [argcol(moniker(%q0))] [pcol(is already registered as your alt!)],11111,{@trigger me/TRIG_ALT_CLAIM_REQ=%#,%q0}
&TRIG_ALT_CLEANUP #social=&%0 [v(DB_ALTS)]=if(setr(1,sort(iter(first(setr(0,get(v(DB_ALTS)/%0)),|),if(strmatch(get(##/_PLAYER_ID),after(%0,DATA_PLAYER_)),##)))),%q1|[rest(%q0,|)])
&CMND_ALTS_CONFIRM #social=$+alts/confirm *:@switch [t(setr(0,whois(%0)))][gt(get(v(DB_ALTS)/DATA_REQ_[edit(%q0,#,)]_[edit(%#,#,)]),secs())]=0*,@pemit %#=[errstr()] [pcol(I don't recognize)] [argcol(%0)],10*,@pemit %#=[errstr()] [argcol(moniker(%q0))] [pcol(has not sent you an alt request or the request has expired.)],11,{@trigger me/TRIG_PLAYER_REC_MERGE=[first(setr(1,sort(get(%q0/_PLAYER_ID) [get(%#/_PLAYER_ID)])))],[last(%q1)];&DATA_REQ_[edit(%q0,#,)]_[edit(%#,#,)] [v(DB_ALTS)];@pemit %#=[pcol(Confirmed that you are an alt of)] [argcol(moniker(%q0))]}
&TRIG_ALTS_CLEANUP #social=@dolist [lattr(v(DB_ALTS)/DATA_PLAYER_*)]=@trigger me/TRIG_ALT_CLEANUP=##
&CMND_ALTS_PLAYER #social=$+alts *:@switch [t(setr(0,whois(%0)))][corbool(strmatch(%q0,%#),hasauthority(%#,VIEWSTATS),u(UFUN_ALTS_PUBLIC,%q0))]=0*,@pemit %#=[errstr()] [pcol(I can't identify)] [argcol(%0)],10*,@pemit %#=[errstr()] [pcol(To view someone else's alts they must be set public or you must have the authority)] [argcol(VIEWSTATS)],11,{@pemit %#=[header(moniker(%q0)'s Registered Alts)]%r[u(UFUN_FMT_ALTS,first(u(UFUN_GETALTS,%q0),|))];@if [hasauthority(%#,VIEWSTATS)]={@pemit %#=[subheader(Unregistered Alts (by email))]%r[u(UFUN_FMT_ALTS,if(get(%q0/SEMAIL),search(EPLAYER=\\[strmatch(get(##/SEMAIL),get(%q0/SEMAIL))\\])))][subheader(Unregistered Alts (by network))]%r[u(UFUN_FMT_ALTS,setunion(search(EPLAYER=\[u(#8046/UFUN_IP_COLLISION,##,%q0)\]),%q0))]};@force me=@pemit %#=\[ljust(pcol(Public:) [argcol(if(u(UFUN_ALTS_PUBLIC,%q0),ON,OFF))],38)\]\[pcol(Ping:)\] \[argcol(if(corbool(u(UFUN_ALTS_PING,%q0),not(hasattr(%q0,_PLAYER_ID))),ON,OFF))\]%%r[footer()]}
&UFUN_ALTS_PUBLIC #social=strmatch(extract(u(UFUN_GETALTS,%0),2,1,|),PUBLIC)
&UFUN_GETALTS #social=get(v(DB_ALTS)/DATA_PLAYER_[get(%0/_PLAYER_ID)])
&UFUN_FMT_ALTS #social=column(sort(iter(%0,u(UFUN_FMT_ALT,##),%b,|),a,|),19,|)
&CMND_ALTS_PUBON #social=$+alts/pubon:@switch [hasattr(%#,_PLAYER_ID)]=0*,@pemit %#=[errstr()] [pcol(You're not setup for +alts. Please do:)] [argcol(+alts/enroll)],1,{&DATA_PLAYER_[get(%#/_PLAYER_ID)] [v(DB_ALTS)]=[u(UFUN_UPDATE_ALTS,%#,,PUBLIC)];@pemit %#=[pcol(Your list of alts is now)] [argcol(PUBLIC)]}
&CMND_ALTS_PUBOFF #social=$+alts/puboff:@switch [hasattr(%#,_PLAYER_ID)]=0*,@pemit %#=[errstr()] [pcol(You're not setup for +alts. Please do:)] [argcol(+alts/enroll)],1,{&DATA_PLAYER_[get(%#/_PLAYER_ID)] [v(DB_ALTS)]=[u(UFUN_UPDATE_ALTS,%#,,PRIVATE)];@pemit %#=[pcol(Your list of alts is now)] [argcol(PRIVATE)]}
&TRIG_PING_ALTS #social=@dolist %0=@pemit ##=[argcol(moniker(%1))] [pcol(is trying to get your attention on)] [argcol(moniker(%2))] [pcol(with)] [argcol(+alts/ping)][pcol(. To disable pings do:, type)] [argcol(+alts/pingoff)]
&UFUN_ALTS_PING #social=strmatch(extract(u(UFUN_GETALTS,%0),3,1,|),PING)
&CMND_ALTS_PING #social=$+alts/ping *:@switch [t(setr(0,whois(%0)))]=0*,@pemit %#=[errstr()] [pcol(I can't identify)] [argcol(%0)],1,{@if [u(UFUN_ALTS_PING,%q0)]={@trigger me/TRIG_PING_ALTS=[first(u(UFUN_GETALTS,%q0),|)],%#,%q0}};@pemit %#=[pcol(Sending pings to)] [argcol(moniker(%q0))] [pcol(and [poss(%q0)] alts.)] [tcol(NOTE:)] [pcol(subj(%q0) may have no alts online or have alt pings disabled.)]
&CMND_ALTS_PINGON #social=$+alts/pingon:@switch [hasattr(%#,_PLAYER_ID)]=0*,@pemit %#=[errstr()] [pcol(You're not setup for +alts. Please do:)] [argcol(+alts/enroll)],1,{&DATA_PLAYER_[get(%#/_PLAYER_ID)] [v(DB_ALTS)]=[u(UFUN_UPDATE_ALTS,%#,,,PING)];@pemit %#=[pcol(You are now set to receive pings.)]}
&CMND_ALTS_PINGOFF #social=$+alts/pingoff:@switch [hasattr(%#,_PLAYER_ID)]=0*,@pemit %#=[errstr()] [pcol(You're not setup for +alts. Please do:)] [argcol(+alts/enroll)],1,{&DATA_PLAYER_[get(%#/_PLAYER_ID)] [v(DB_ALTS)]=[u(UFUN_UPDATE_ALTS,%#,,,NOPING)];@pemit %#=[pcol(You are now set to not receive pings.)]}
&CMND_ALTS_NOARGS #social=$+alts:@force %#=+alts %#
&UFUN_UPDATE_ALTS #social=localize(setq(0,u(UFUN_GETALTS,%0))[if(%1,%1,first(%q0,|))]|[if(%2,%2,if(setr(9,extract(%q0,2,1,|)),%q9,PRIVATE))]|[if(%3,%3,if(setr(9,extract(%q0,3,1,|)),%q9,PING))]|[if(%4,%4,if(setr(9,extract(%q0,4,1,|)),%q9,NOTBLESSED))])
&UFUN_ALTS_BLESSED #social=strmatch(extract(u(UFUN_GETALTS,%0),4,1,|),BLESSED)
&UFUN_FMT_ALT_CLAIM #social=[ljust(argcol(moniker(#[extract(%0,3,1,_)])),18)] [pcol(claims)] [ljust(argcol(moniker(#[extract(%0,4,1,_)])),18)] [if(gt(setr(0,get(v(DB_ALTS)/%0)),secs()),Expires: [pcol(convsecs(%q0))],[tcol(EXPIRED)])]
&CMND_ALTS_PENDING #social=$+alts/pending:@pemit %#=[header(Pending Alt Claims)]%r[iter(lattr(v(DB_ALTS)/DATA_REQ_[edit(%#,#,)]_*) [lattr(v(DB_ALTS)/DATA_REQ_*_[edit(%#,#,)])],u(UFUN_FMT_ALT_CLAIM,##),%b,%r)]%r[footer()]
&CMND_ALTS_CANCEL #social=$+alts/cancel *:&DATA_REQ_[edit(%#,#,)]_[edit(whois(%0),#,)] [v(DB_ALTS)];&DATA_REQ_[edit(whois(%0),#,)]_[edit(%#,#,)] [v(DB_ALTS)];@pemit %#=[pcol(Cancelled.)]
&UFUN_FMT_ALT #social=ansi(switch([isapproved(%0)][lt(sub(secs(),if(hasflag(%0,CONNECTED),secs(),convtime(get(%0/last)))),mul(60,60,24,30))],11,hg,10,g,01,hc,00,c),moniker(%0))[if(hasflag(%0,CONNECTED),+)][if(gt(extract(mail(%0),2,1),0),*)]
&CMND_CHANTRY_NOTE #social=$+chantry *:@switch [isapproved(%#)][t(setr(N,get(#socialdb/DATA_CHANTRY_HQ_[u(#dataman/UFUN_ENCODE_STAT,setr(C,u(#dataman/UFUN_GET_BASE_STAT,%#,Cabal)))])))]=0*,@pemit %#=[errstr()] [pcol(You must be approved to use +chantry)],10*,@pemit %#=[errstr()] [pcol(Your chantry ')][argcol(%qC)][pcol(' isn't configured for +chantry.)],11,@pemit %#=[header(Chantry: %qC)]%r[header(Headquarters: [name(%qN)])]%r[header(Information: [ucstr(%0)])]%r[get(%qN/_data_note_private_%0)]%r[footer()]
&CMND_CHANTRY_NOTE_DEFAULT #social=$+chantry:@force %#=+chantry chantry
&CMND_CHANTRY_CHAT #social=$+chantry/chat *:@switch [isapproved(%#)][t(setr(N,get(#socialdb/DATA_CHANTRY_CHAN_[u(#dataman/UFUN_ENCODE_STAT,setr(P,u(#dataman/UFUN_GET_BASE_STAT,%#,Cabal)))])))][t(setr(W,setdiff(setinter(lwho(),u(#dataman/UFUN_MATCH_SHEETS,Cabal@is@%qP,APP)),%#)))][not(get(%#/DATA_CHANTRYCHAT_OFF))]=0*,@pemit %#=[errstr()] [pcol(You must be approved to use +chantry)],10*,@pemit %#=[errstr()] [pcol(Your chantry ')][argcol(%qP)][pcol(' isn't configured for +chantry.)],110*,@pemit %#=[errstr()] [pcol(No one else from)] [argcol(%qP)] [pcol(is online.)],1110*,@pemit %#=[errstr()] [pcol(Your chantry chat is off. Use)] [argcol(+chantry/on)],1111,{@dolist %qW %#=@trigger me/TRIG_SEND_CHANTRY_CHAT=##,%#,%0}
&TRIG_SEND_CHANTRY_CHAT #social=@switch [t(get(%0/DATA_CHANTRYCHAT_OFF))]=0,@pemit %0=[scol(<)][pcol(%qN)][scol(>)] [argcol(moniker(%1))][u(UFUN_POSE,%2)]
&CMND_CHANTRY_ON #social=$+chantry/on:&DATA_CHANTRYCHAT_OFF %#;@pemit %#=[pcol(Chantry Chat enabled)]
&CMND_CHANTRY_OFF #social=$+chantry/off:&DATA_CHANTRYCHAT_OFF %#=1;@pemit %#=[pcol(Chantry Chat disabled)]
&CMND_CCHAT #social=$+cchat *:@force %#=+chantry/chat [escape(%0)]
@rxlevel #social=